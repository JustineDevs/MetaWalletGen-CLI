[build-system]
requires = ["setuptools>=61.0", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "metawalletgen-cli"
dynamic = ["version"]
description = "Professional Ethereum Wallet Generator with Advanced Security & Performance Features"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "MetaWalletGen Team", email = "support@metawalletgen.com"}
]
maintainers = [
    {name = "MetaWalletGen Team", email = "maintainers@metawalletgen.com"}
]
keywords = [
    "ethereum", "wallet", "cryptocurrency", "blockchain", "bip39", "bip44",
    "cryptography", "security", "cli", "command-line", "hdwallet", "metamask"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Security :: Cryptography",
    "Topic :: Office/Business :: Financial",
    "Topic :: System :: Systems Administration",
    "Topic :: Utilities",
]
requires-python = ">=3.8"
dependencies = [
    "rich>=13.0.0",
    "cryptography>=41.0.0",
    "hdwallet>=2.2.0",
    "eth-account>=0.9.0",
    "click>=8.0.0",
    "pyyaml>=6.0.0",
    "pandas>=2.0.0",
    "psutil>=5.9.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]
enterprise = [
    "psycopg2-binary>=2.9.0",
    "redis>=4.0.0",
    "celery>=5.0.0",
    "prometheus-client>=0.16.0",
]
full = [
    "psutil>=5.9.0",
    "rich>=13.0.0",
    "cryptography>=41.0.0",
    "hdwallet>=2.2.0",
    "eth-account>=0.9.0",
    "click>=8.0.0",
    "pyyaml>=6.0.0",
    "pandas>=2.0.0",
]

[project.urls]
Homepage = "https://github.com/metawalletgen/cli"
Documentation = "https://metawalletgen.com/docs"
Repository = "https://github.com/metawalletgen/cli"
"Bug Tracker" = "https://github.com/metawalletgen/cli/issues"
Security = "https://metawalletgen.com/security"

[project.scripts]
metawalletgen = "metawalletgen.cli.main:main"
mwg = "metawalletgen.cli.main:main"

[tool.setuptools]
packages = ["metawalletgen"]

[tool.setuptools.package-data]
metawalletgen = [
    "config/*.yaml",
    "config/*.yml",
    "templates/*.txt",
    "*.md",
]

[tool.setuptools.dynamic]
version = {attr = "metawalletgen.__version__"}

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["metawalletgen"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=metawalletgen",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["metawalletgen"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
