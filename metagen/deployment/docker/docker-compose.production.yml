version: '3.8'

services:
  # Main MetaWalletGen API Service
  metawalletgen-api:
    image: metawalletgen-cli:latest
    container_name: metawalletgen-api
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      - METAWALLETGEN_ENV=production
      - METAWALLETGEN_CONFIG=/app/config/production.yaml
      - PYTHONPATH=/app
    volumes:
      - ./config:/app/config:ro
      - metawalletgen_data:/app/data
      - metawalletgen_logs:/app/logs
    depends_on:
      - metawalletgen-db
      - redis
    networks:
      - metawalletgen-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.metawalletgen.rule=Host(`api.yourdomain.com`)"
      - "traefik.http.services.metawalletgen.loadbalancer.server.port=5000"

  # Load Balancer (multiple API instances)
  metawalletgen-api-2:
    image: metawalletgen-cli:latest
    container_name: metawalletgen-api-2
    restart: unless-stopped
    ports:
      - "5001:5000"
    environment:
      - METAWALLETGEN_ENV=production
      - METAWALLETGEN_CONFIG=/app/config/production.yaml
      - PYTHONPATH=/app
    volumes:
      - ./config:/app/config:ro
      - metawalletgen_data:/app/data
      - metawalletgen_logs:/app/logs
    depends_on:
      - metawalletgen-db
      - redis
    networks:
      - metawalletgen-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Database Service
  metawalletgen-db:
    image: postgres:15-alpine
    container_name: metawalletgen-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: metawalletgen
      POSTGRES_USER: metawalletgen
      POSTGRES_PASSWORD: ${DB_PASSWORD:-changeme123!}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - metawalletgen-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U metawalletgen"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Redis Cache Service
  redis:
    image: redis:7-alpine
    container_name: metawalletgen-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-changeme123!}
    volumes:
      - redis_data:/data
    networks:
      - metawalletgen-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: metawalletgen-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - metawalletgen_logs:/var/log/nginx
    depends_on:
      - metawalletgen-api
      - metawalletgen-api-2
    networks:
      - metawalletgen-network
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'
        reservations:
          memory: 64M
          cpus: '0.1'
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Traefik Reverse Proxy (Alternative to Nginx)
  traefik:
    image: traefik:v2.10
    container_name: metawalletgen-traefik
    restart: unless-stopped
    ports:
      - "8080:8080"  # Traefik dashboard
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./traefik/ssl:/etc/traefik/ssl:ro
    networks:
      - metawalletgen-network
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'
        reservations:
          memory: 64M
          cpus: '0.1'
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: metawalletgen-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - metawalletgen-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: metawalletgen-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-changeme123!}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - metawalletgen-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Backup Service
  backup:
    image: metawalletgen-cli:latest
    container_name: metawalletgen-backup
    restart: "no"
    environment:
      - METAWALLETGEN_ENV=production
      - METAWALLETGEN_CONFIG=/app/config/production.yaml
      - PYTHONPATH=/app
    volumes:
      - ./config:/app/config:ro
      - backup_data:/app/backups
      - metawalletgen_data:/app/data:ro
    depends_on:
      - metawalletgen-db
    networks:
      - metawalletgen-network
    command: ["python", "-m", "metagen.enterprise.database", "--backup"]
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Maintenance Service
  maintenance:
    image: metawalletgen-cli:latest
    container_name: metawalletgen-maintenance
    restart: "no"
    environment:
      - METAWALLETGEN_ENV=production
      - METAWALLETGEN_CONFIG=/app/config/production.yaml
      - PYTHONPATH=/app
    volumes:
      - ./config:/app/config:ro
      - metawalletgen_data:/app/data
      - metawalletgen_logs:/app/logs
    depends_on:
      - metawalletgen-db
      - redis
    networks:
      - metawalletgen-network
    command: ["python", "-m", "metagen.performance.optimizer", "--maintenance"]
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

# Named Volumes
volumes:
  metawalletgen_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/metawalletgen
  metawalletgen_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/log/metawalletgen
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/postgresql/metawalletgen
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/redis/metawalletgen
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/prometheus/metawalletgen
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/grafana/metawalletgen
  backup_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/backups/metawalletgen

# Networks
networks:
  metawalletgen-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    driver_opts:
      com.docker.network.bridge.name: metawalletgen-br0

# Resource limits for the entire stack
x-resource-limits: &resource-limits
  limits:
    memory: 4G
    cpus: '4.0'
  reservations:
    memory: 2G
    cpus: '2.0'
