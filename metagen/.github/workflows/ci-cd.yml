name: MetaWalletGen CLI - CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  PYTHON_VERSION: "3.11"
  PACKAGE_NAME: "metawalletgen-cli"

jobs:
  # Quality Assurance
  quality-check:
    name: 🧪 Quality Assurance
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
    
    - name: 🔍 Lint with flake8
      run: |
        pip install flake8 black isort mypy
        flake8 metawalletgen --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 metawalletgen --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: 🎨 Format check with black
      run: |
        black --check --diff metawalletgen
    
    - name: 📝 Import sorting check with isort
      run: |
        isort --check-only --diff metawalletgen
    
    - name: 🔍 Type check with mypy
      run: |
        mypy metawalletgen --ignore-missing-imports
    
    - name: 🧪 Run tests
      run: |
        pip install pytest pytest-cov pytest-xdist
        pytest --cov=metawalletgen --cov-report=xml --cov-report=html --cov-report=term-missing -n auto
    
    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Security Audit
  security-audit:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 🔍 Security scan with Bandit
      run: |
        pip install bandit safety
        bandit -r metawalletgen -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true
    
    - name: 🔍 Dependency vulnerability scan
      run: |
        pip install pip-audit
        pip-audit --format json --output pip-audit-report.json || true
    
    - name: 📊 Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          pip-audit-report.json

  # Build and Package
  build-package:
    name: 🔨 Build Package
    runs-on: ubuntu-latest
    needs: [quality-check, security-audit]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 📦 Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel twine check-wheel-contents
    
    - name: 🔨 Build package
      run: |
        python -m build --sdist --wheel
    
    - name: 🔍 Check package quality
      run: |
        twine check dist/*
        check-wheel-contents dist/*.whl
    
    - name: 📊 Upload package artifacts
      uses: actions/upload-artifact@v3
      with:
        name: package-artifacts
        path: dist/
        retention-days: 30

  # Test Package Installation
  test-installation:
    name: 📦 Test Package Installation
    runs-on: ${{ matrix.os }}
    needs: build-package
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.11"]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: 📥 Download package artifacts
      uses: actions/download-artifact@v3
      with:
        name: package-artifacts
        path: dist/
    
    - name: 🧪 Test package installation
      run: |
        python -m pip install --upgrade pip
        pip install dist/*.whl
        metawalletgen --version
        metawalletgen --help
    
    - name: 🧪 Test CLI functionality
      run: |
        metawalletgen generate --count 1 --output test_wallet.json --quiet
        metawalletgen list --input test_wallet.json
        metawalletgen security
        metawalletgen performance
        metawalletgen health

  # Deploy to PyPI (Staging)
  deploy-staging:
    name: 🚀 Deploy to PyPI (Staging)
    runs-on: ubuntu-latest
    needs: [build-package, test-installation]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging'
    environment: staging
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 📥 Download package artifacts
      uses: actions/download-artifact@v3
      with:
        name: package-artifacts
        path: dist/
    
    - name: 📦 Install twine
      run: pip install twine
    
    - name: 🚀 Deploy to TestPyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
        TWINE_REPOSITORY_URL: https://test.pypi.org/legacy/
      run: |
        twine upload dist/*

  # Deploy to PyPI (Production)
  deploy-production:
    name: 🚀 Deploy to PyPI (Production)
    runs-on: ubuntu-latest
    needs: [build-package, test-installation]
    if: github.event_name == 'release' && github.event.action == 'published'
    environment: production
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 📥 Download package artifacts
      uses: actions/download-artifact@v3
      with:
        name: package-artifacts
        path: dist/
    
    - name: 📦 Install twine
      run: pip install twine
    
    - name: 🚀 Deploy to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*
    
    - name: 🏷️ Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

  # Docker Build and Push
  docker-build:
    name: 🐳 Docker Build & Push
    runs-on: ubuntu-latest
    needs: [build-package, test-installation]
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🔐 Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: 🏗️ Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          metawalletgen/cli:latest
          metawalletgen/cli:${{ github.ref_name }}
          metawalletgen/cli:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Performance Benchmarking
  performance-benchmark:
    name: 📊 Performance Benchmark
    runs-on: ubuntu-latest
    needs: [build-package]
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 📥 Download package artifacts
      uses: actions/download-artifact@v3
      with:
        name: package-artifacts
        path: dist/
    
    - name: 📦 Install package
      run: |
        pip install dist/*.whl
        pip install pytest-benchmark
    
    - name: 🏃 Run performance benchmarks
      run: |
        pytest --benchmark-only --benchmark-sort=mean --benchmark-min-rounds=10
    
    - name: 📊 Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: .pytest_cache/

  # Documentation Build
  build-docs:
    name: 📚 Build Documentation
    runs-on: ubuntu-latest
    needs: [build-package]
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 📦 Install documentation dependencies
      run: |
        pip install sphinx sphinx-rtd-theme myst-parser
        pip install dist/*.whl
    
    - name: 🔨 Build documentation
      run: |
        cd docs
        make html
        make latexpdf
    
    - name: 📊 Upload documentation
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: docs/_build/
        retention-days: 30

  # Notify Success
  notify-success:
    name: ✅ Notify Success
    runs-on: ubuntu-latest
    needs: [deploy-production, docker-build]
    if: always() && needs.deploy-production.result == 'success' && needs.docker-build.result == 'success'
    
    steps:
    - name: 🎉 Success notification
      run: |
        echo "🎉 MetaWalletGen CLI v${{ github.ref_name }} successfully deployed!"
        echo "📦 PyPI: https://pypi.org/project/metawalletgen-cli/"
        echo "🐳 Docker: https://hub.docker.com/r/metawalletgen/cli"
        echo "📚 Documentation: https://metawalletgen.com/docs"
